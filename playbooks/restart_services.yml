# Purpose: Automated playbook to manage and restart essential services (Nginx, Apache, MySQL)
# Requires root/sudo privileges to restart services
# Handles service existence checks and graceful failure handling

- name: Restart Essential Services
  hosts: all
  become: true
  # Pre-tasks: Check if required services exist before attempting operations
  pre_tasks:
    - name: Check if services exist
      stat:
        path: "/etc/init.d/{{ item }}"
      register: service_status
      loop:
        - nginx
        - apache2
        - mysql
      ignore_errors: true
  # Handlers: Define service restart operations
  handlers:
    # Nginx restart handler
    - name: restart nginx
      service:
        name: nginx
        state: restarted
      listen: "restart nginx service"
    # Apache restart handler
    - name: restart apache
      service:
        name: apache2
        state: restarted
      listen: "restart apache service"
    # MySQL restart handler
    - name: restart mysql
      service:
        name: mysql
        state: restarted
      listen: "restart mysql service"
  # Main tasks: Service management and status verification
  tasks:
    # Nginx service management block
    - name: Restart Nginx if exists
      block:
        - name: Check Nginx status
          service:
            name: nginx
            state: started
          notify: "restart nginx service"
      when: service_status.results[0].stat.exists
      rescue:
        - name: Log Nginx restart failure
          debug:
            msg: "Failed to restart Nginx service"
    # Apache service management block
    - name: Restart Apache if exists
      block:
        - name: Check Apache status
          service:
            name: apache2
            state: started
          notify: "restart apache service"
      when: service_status.results[1].stat.exists
      rescue:
        - name: Log Apache restart failure
          debug:
            msg: "Failed to restart Apache service"
    # MySQL service management block
    - name: Restart MySQL if exists
      block:
        - name: Check MySQL status
          service:
            name: mysql
            state: started
          notify: "restart mysql service"
      when: service_status.results[2].stat.exists
      rescue:
        - name: Log MySQL restart failure
          debug:
            msg: "Failed to restart MySQL service"
    # Final status check section
    - name: Verify services status
      service_facts:
    - name: Display service status
      debug:
        msg: "{{ item }} is {{ ansible_facts.services[item + '.service'].state }}"
      loop:
        - nginx
        - apache2
        - mysql
      when: ansible_facts.services[item + '.service'] is defined
